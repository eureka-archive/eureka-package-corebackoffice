<?php

/*
 * Copyright (c) Romain Cottard
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eureka\Package\CoreBackoffice\Domain\User\Entity\Abstracts;

use Eureka\Component\Orm\AbstractEntity;

/**
 * Abstract User data class.
 * /!\ AUTO GENERATED FILE. DO NOT EDIT THIS FILE.
 * THIS FILE IS OVERWRITTEN WHEN THE ORM SCRIPT GENERATOR IS RUN.
 * You can add you specific code in child class: User
 *
 * @author Romain Cottard
 */
abstract class AbstractUser extends AbstractEntity
{
    /** @var bool $hasAutoIncrement If data has auto increment value. */
    protected $hasAutoIncrement = true;

    /** @var int $id Property id */
    protected $id = 0;

    /** @var bool $isEnabled Property isEnabled */
    protected $isEnabled = true;

    /** @var string $email Property email */
    protected $email = '';

    /** @var string $password Property password */
    protected $password = '';

    /** @var string $firstname Property firstname */
    protected $firstname = '';

    /** @var string $lastname Property lastname */
    protected $lastname = '';

    /** @var int $gender Property gender */
    protected $gender = 1;

    /** @var string $dateCreate Property dateCreate */
    protected $dateCreate = '0000-00-00 00:00:00';

    /** @var string $dateUpdate Property dateUpdate */
    protected $dateUpdate = null;

    /**
     * Get cache key
     *
     * @return string
     */
    public function getCacheKey()
    {
        return 'orm.eureka.corebackoffice.user.admin.' . $this->getId();
    }

    /**
     * Get value for field "user_admin_id"
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get value for field "user_admin_is_enabled"
     *
     * @return bool
     */
    public function isEnabled()
    {
        return $this->isEnabled;
    }

    /**
     * Get value for field "user_admin_email"
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Get value for field "user_admin_password"
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Get value for field "user_admin_firstname"
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->firstname;
    }

    /**
     * Get value for field "user_admin_lastname"
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->lastname;
    }

    /**
     * Get value for field "user_admin_gender"
     *
     * @return int
     */
    public function getGender()
    {
        return $this->gender;
    }

    /**
     * Get value for field "user_admin_date_create"
     *
     * @return string
     */
    public function getDateCreate()
    {
        return $this->dateCreate;
    }

    /**
     * Get value for field "user_admin_date_update"
     *
     * @return string
     */
    public function getDateUpdate()
    {
        return $this->dateUpdate;
    }

    /**
     * Overridden method setAutoIncrementId().
     *
     * @param  int $id
     * @return $this
     */
    public function setAutoIncrementId($id)
    {
        return $this->setId($id);
    }

    /**
     * Set value for field "user_admin_id"
     *
     * @param  int $id
     * @return $this
     * @throws \UnderflowException
     */
    public function setId($id)
    {
        $id = (int) $id;

        if ($id < 0) {
            throw new \UnderflowException('Value of "id" must be greater or equal to 0');
        }


        if ($this->exists() && $this->id !== $id) {
            $this->updated['id'] = true;
        }

        $this->id = $id;

        return $this;
    }

    /**
     * Set value for field "user_admin_is_enabled"
     *
     * @param  bool $isEnabled
     * @return $this
     */
    public function setIsEnabled($isEnabled)
    {
        $isEnabled = (bool) $isEnabled;

        if ($this->exists() && $this->isEnabled !== $isEnabled) {
            $this->updated['isEnabled'] = true;
        }

        $this->isEnabled = $isEnabled;

        return $this;
    }

    /**
     * Set value for field "user_admin_email"
     *
     * @param  string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $email = (string) $email;

        if ($this->exists() && $this->email !== $email) {
            $this->updated['email'] = true;
        }

        $this->email = $email;

        return $this;
    }

    /**
     * Set value for field "user_admin_password"
     *
     * @param  string $password
     * @return $this
     */
    public function setPassword($password)
    {
        $password = (string) $password;

        if ($this->exists() && $this->password !== $password) {
            $this->updated['password'] = true;
        }

        $this->password = $password;

        return $this;
    }

    /**
     * Set value for field "user_admin_firstname"
     *
     * @param  string $firstname
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $firstname = (string) $firstname;

        if ($this->exists() && $this->firstname !== $firstname) {
            $this->updated['firstname'] = true;
        }

        $this->firstname = $firstname;

        return $this;
    }

    /**
     * Set value for field "user_admin_lastname"
     *
     * @param  string $lastname
     * @return $this
     */
    public function setLastname($lastname)
    {
        $lastname = (string) $lastname;

        if ($this->exists() && $this->lastname !== $lastname) {
            $this->updated['lastname'] = true;
        }

        $this->lastname = $lastname;

        return $this;
    }

    /**
     * Set value for field "user_admin_gender"
     *
     * @param  int $gender
     * @return $this
     * @throws \UnderflowException
     */
    public function setGender($gender)
    {
        $gender = (int) $gender;

        if ($gender < 0) {
            throw new \UnderflowException('Value of "gender" must be greater or equal to 0');
        }


        if ($this->exists() && $this->gender !== $gender) {
            $this->updated['gender'] = true;
        }

        $this->gender = $gender;

        return $this;
    }

    /**
     * Set value for field "user_admin_date_create"
     *
     * @param  string $dateCreate
     * @return $this
     */
    public function setDateCreate($dateCreate)
    {
        $dateCreate = (string) $dateCreate;

        if ($this->exists() && $this->dateCreate !== $dateCreate) {
            $this->updated['dateCreate'] = true;
        }

        $this->dateCreate = $dateCreate;

        return $this;
    }

    /**
     * Set value for field "user_admin_date_update"
     *
     * @param  string $dateUpdate
     * @return $this
     */
    public function setDateUpdate($dateUpdate)
    {
        $dateUpdate = ($dateUpdate === null ? $dateUpdate : (string) $dateUpdate);

        if ($this->exists() && $this->dateUpdate !== $dateUpdate) {
            $this->updated['dateUpdate'] = true;
        }

        $this->dateUpdate = $dateUpdate;

        return $this;
    }
}
