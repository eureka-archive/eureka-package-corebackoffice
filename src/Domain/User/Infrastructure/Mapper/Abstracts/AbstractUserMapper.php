<?php

/*
 * Copyright (c) Romain Cottard
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eureka\Package\CoreBackoffice\Domain\User\Infrastructure\Mapper\Abstracts;

use Eureka\Component\Orm\AbstractMapper;
use Eureka\Package\CoreBackoffice\Domain\User\Entity\User;
use Eureka\Component\Orm\Query\QueryBuilderInterface;
use Eureka\Component\Orm\Query\SelectBuilder;

/**
 * Abstract User mapper class.
 *
 * /!\ AUTO GENERATED FILE. DO NOT EDIT THIS FILE.
 * THIS FILE IS OVERWRITTEN WHEN THE ORM SCRIPT GENERATOR IS RUN.
 * You can add you specific code in child class: User
 *
 * @author Romain Cottard
 */
abstract class AbstractUserMapper extends AbstractMapper
{
    /** @var string $dataClass Name of class use to instance DataMapper Data class. */
    protected $dataClass = User::class;

    /** @var string $table Table name */
    protected $table = 'user_admin';

    /** @var string[] $fields List of fields */
    protected $fields = [
        'user_admin_id',
        'user_admin_is_enabled',
        'user_admin_email',
        'user_admin_password',
        'user_admin_firstname',
        'user_admin_lastname',
        'user_admin_gender',
        'user_admin_date_create',
        'user_admin_date_update'
    ];

    /** @var string[] $primaryKeys List of primary keys */
    protected $primaryKeys = [
        'user_admin_id'
    ];

    /** @var string[] $dataNamesMap List of mapped names */
    protected $dataNamesMap = [

        'user_admin_id' => [
            'get'      => 'getId',
            'set'      => 'setId',
            'property' => 'id',
        ],
        'user_admin_is_enabled' => [
            'get'      => 'isEnabled',
            'set'      => 'setIsEnabled',
            'property' => 'isEnabled',
        ],
        'user_admin_email' => [
            'get'      => 'getEmail',
            'set'      => 'setEmail',
            'property' => 'email',
        ],
        'user_admin_password' => [
            'get'      => 'getPassword',
            'set'      => 'setPassword',
            'property' => 'password',
        ],
        'user_admin_firstname' => [
            'get'      => 'getFirstname',
            'set'      => 'setFirstname',
            'property' => 'firstname',
        ],
        'user_admin_lastname' => [
            'get'      => 'getLastname',
            'set'      => 'setLastname',
            'property' => 'lastname',
        ],
        'user_admin_gender' => [
            'get'      => 'getGender',
            'set'      => 'setGender',
            'property' => 'gender',
        ],
        'user_admin_date_create' => [
            'get'      => 'getDateCreate',
            'set'      => 'setDateCreate',
            'property' => 'dateCreate',
        ],
        'user_admin_date_update' => [
            'get'      => 'getDateUpdate',
            'set'      => 'setDateUpdate',
            'property' => 'dateUpdate',
        ],
    ];

    /** @var bool $isCacheEnabled If cache is enable or not by default. */
    protected $isCacheEnabled = false;

    /**
     * {@inheritdoc}
     * @return User
     */
    public function findById($id)
    {
        return parent::findById($id);
    }

    /**
     * {@inheritdoc}
     * @return User
     */
    public function findByKeys(array $keys)
    {
        return parent::findByKeys($keys);
    }

    /**
     * {@inheritdoc}
     * @return User[]
     */
    public function select(SelectBuilder $queryBuilder)
    {
        return parent::select($queryBuilder);
    }

    /**
     * {@inheritdoc}
     * @return User
     */
    public function selectOne(SelectBuilder $queryBuilder)
    {
        return parent::selectOne($queryBuilder);
    }

    /**
     * {@inheritdoc}
     * @return User[]
     */
    public function query(QueryBuilderInterface $queryBuilder)
    {
        return parent::query($queryBuilder);
    }

    /**
     * {@inheritdoc}
     * @return User
     */
    public function newEntity(\stdClass $row = null, $exists = false)
    {
        return parent::newEntity($row, $exists);
    }
}
